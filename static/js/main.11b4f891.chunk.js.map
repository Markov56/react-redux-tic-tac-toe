{"version":3,"sources":["redux/boardReducer.js","components/Board/Square/Square.js","components/Board/Board.js","redux/store.js","index.js"],"names":["Square","props","square","useSelector","state","boardState","squares","id","value","useDispatch","className","onClick","calculateWinner","lines","i","length","a","b","c","Board","dispatch","nextMove","console","log","status","renderSquare","handleClick","winner","type","alert","SET_X","SET_O","initialState","squareItem","push","boardReducer","action","map","s","reducers","combineReducers","store","createStore","window","Game","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.11b4f891.chunk.js","sourcesContent":["const SET_X = 'SET_X';\r\nconst SET_O = 'SET_O';\r\n\r\nlet initialState = {\r\n    squares: [],\r\n    nextMove: 'X'\r\n};\r\n\r\nfor(let i = 0; i<9; i++){\r\n    let squareItem = {\r\n        value: null,\r\n        id: i\r\n    }\r\n    initialState.squares.push(squareItem)\r\n}\r\n\r\nconst boardReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        \r\n        case SET_X:\r\n           \r\n            return {...state,\r\n            squares: state.squares.map(s => {\r\n                if(s.id === action.id){\r\n                    s.value = 'X'\r\n                }\r\n                return s\r\n            }),\r\n            nextMove: 'O'\r\n        }\r\n        \r\n        case SET_O:\r\n            \r\n            return {...state,\r\n                squares: state.squares.map(s => {\r\n                    if(s.id === action.id){\r\n                        s.value = 'O'\r\n                    }\r\n                    return s\r\n                }),\r\n                nextMove: 'X'\r\n            }  \r\n       \r\n        default:\r\n            return state;\r\n    }\r\n         \r\n }\r\n\r\n export default boardReducer;","import React from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux'\r\n\r\nconst Square = (props) => {\r\n    const square = useSelector(state => state.boardState.squares[props.id].value);\r\n    const id = useSelector(state => state.boardState.squares[props.id].id)\r\n    const dispatch = useDispatch();\r\n    return (\r\n        <button className=\"square\" id={props.id} onClick={props.onClick} >\r\n           {square}\r\n        </button>\r\n    );\r\n}\r\n\r\nexport default Square;","import React from 'react';\r\nimport Square from './Square/Square'\r\nimport { useSelector, useDispatch } from 'react-redux'\r\n\r\nconst Board = (props) => {\r\n    const dispatch = useDispatch();\r\n    const nextMove = useSelector(state => state.boardState.nextMove)\r\n    const squares = useSelector(state => state.boardState.squares)\r\n    console.log(squares)\r\n  \r\n    let renderSquare = (i) => {\r\n        return <Square id={i} onClick={ () => handleClick(i) }/>;\r\n    }\r\n\r\n    const handleClick = (i) => {\r\n        if(winner || squares[i].value){\r\n            return;\r\n            }\r\n        if(nextMove === 'X') {\r\n                dispatch({\r\n                    type: 'SET_X',\r\n                    id: i\r\n                })\r\n            } else if (nextMove === 'O') {\r\n            console.log(squares)\r\n                dispatch({\r\n                    type: 'SET_O',\r\n                    id: i\r\n                })\r\n            } else if (winner) {alert('stop')}\r\n        }\r\n        const winner = calculateWinner(squares);\r\n        let status;\r\n\r\n        if(winner) {\r\n                status = `Выиграл: ${winner}`\r\n            } else { \r\n                status = `Следующий ход: ${nextMove}`\r\n             };\r\n    return (\r\n        <div>\r\n            <div className=\"status\">{status}</div>\r\n            <div className=\"board-row\">\r\n                {renderSquare(0)}\r\n                {renderSquare(1)}\r\n                {renderSquare(2)}\r\n            </div>\r\n            <div className=\"board-row\">\r\n                {renderSquare(3)}\r\n                {renderSquare(4)}\r\n                {renderSquare(5)}\r\n            </div>\r\n            <div className=\"board-row\">\r\n                {renderSquare(6)}\r\n                {renderSquare(7)}\r\n                {renderSquare(8)}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst calculateWinner = (squares) => {\r\n    const lines = [\r\n      [0, 1, 2],\r\n      [3, 4, 5],\r\n      [6, 7, 8],\r\n      [0, 3, 6],\r\n      [1, 4, 7],\r\n      [2, 5, 8],\r\n      [0, 4, 8],\r\n      [2, 4, 6],\r\n    ];\r\n    for (let i = 0; i < lines.length; i++) {\r\n      const [a, b, c] = lines[i];\r\n      if (squares[a].value  && squares[a].value === squares[b].value && squares[a].value === squares[c].value) {\r\n            return squares[a].value\r\n      }\r\n    }\r\n    return null;\r\n  }\r\nexport default Board;\r\n\r\n","import { createStore, applyMiddleware, combineReducers } from 'redux';\r\nimport boardReducer from './boardReducer'\r\n\r\n\r\nlet reducers = combineReducers({\r\n    \r\n    boardState: boardReducer\r\n\r\n})\r\n\r\nlet store = createStore(reducers);\r\n\r\nwindow.store = store;\r\n\r\nexport default store;\r\n \r\n\r\n\r\n\r\n\r\n\r\n","//попробовать через метод connect\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { Provider } from 'react-redux';\nimport Board from './components/Board/Board'\nimport store from './redux/store'\n\n// import store from './redux/store'\n\nconst Game = (props) => {\n \n    return (\n        \n        <div className=\"game\">\n            <div className=\"game-board\">\n                <Board />\n            </div>\n            { <div className=\"game-info\">\n                <div>{/* status*/}</div>\n                <ol>{/* TODO*/}</ol>\n            </div> }\n        </div>\n    );\n}\n  // ========================================\n  \n  ReactDOM.render(\n   <Provider store={store}>\n    <Game />\n    </Provider>,\n    document.getElementById('root')\n  );\n  \n  function calculateWinner(squares) {\n      const lines =  [\n        [0, 1, 2],\n        [3, 4, 5],\n        [6, 7, 8],\n        [0, 3, 6],\n        [1, 4, 7],\n        [2, 5, 8],\n        [0, 4, 8],\n        [2, 4, 6],\n      ];\n      for (let i = 0; i < lines.length; i++) {\n          const [a, b, c] = lines[i];\n          if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n              return squares[a];\n          }\n      }\n      return null;\n  }\n\n\n\n\n"],"sourceRoot":""}